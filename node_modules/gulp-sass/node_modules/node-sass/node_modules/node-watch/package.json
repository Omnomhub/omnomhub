{
  "name": "node-watch",
  "version": "0.3.4",
  "description": "fs.watch() wrapper of Nodejs ",
  "url": "https://github.com/yuanchuan/node-watch",
  "author": {
    "name": "yuanchuan",
    "email": "yuanchuan23@gmail.com",
    "url": "http://yuanchuan.name"
  },
  "main": "./lib/watch.js",
  "keywords": [
    "nodewatch",
    "watch",
    "watchfile"
  ],
  "bugs": {
    "url": "https://github.com/yuanchuan/node-watch/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/yuanchuan/node-watch.git"
  },
  "readme": "#Node-watch\nA [fs.watch](http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener) wrapper to watch files or directories(recursively by default).  \n\n\n### Installation\n\n```bash\nnpm install node-watch\n```\n\n### Example\n\n```js\nvar watch = require('node-watch');\n\nwatch('somedir_or_somefile', function(filename) {\n  console.log(filename, ' changed.');\n});\n``` \n\n### Why fs.watch wrapper\n\n* Some editors will generate temporary files which will cause the callback function to be triggered multiple times.\n* when watching a single file the callback function will only be triggered one time and then is seem to be unwatched.\n* Missing an option to watch a directory recursively.\n \n \n### The difference\nThis module **currently** does not differentiate event like `rename` or `delete`. Once there is a change, the callback function will be triggered.\n\n\n### Options\n\n`recursive`:Watch it recursively or not (defaults to **true**). \n\n`followSymLinks`: Follow symbolic links or not (defaults to **false**).\n\n`maxSymLevel`: The max number of following symbolic links, in order to prevent circular links (defaults to **1**). \n\n\n```js\nwatch('somedir', { recursive: false, followSymLinks: true }, function(filename) {\n  console.log(filename, ' changed.');\n});\n```\n\n###FAQ\n\n#### 1. How to watch mutiple files or directories\n\n```js\nwatch(['file1', 'file2'], function(file) {\n  //\n});\n```\n\n#### 2. How to filter files\n\nWrite your own filter function as a higher-order function. For example:\n\n```js\nvar filter = function(pattern, fn) {\n  return function(filename) {\n    if (pattern.test(filename)) {\n      fn(filename);\n    }\n  }\n}\n\n// only watch for js files\nwatch('mydir', filter(/\\.js$/, function(filename) {\n  // \n}));\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/yuanchuan/node-watch",
  "_id": "node-watch@0.3.4",
  "_shasum": "755f64ef5f8ad4acb5bafd2c4e7f4fb6a8db0214",
  "_from": "node-watch@~0.3.4",
  "_resolved": "https://registry.npmjs.org/node-watch/-/node-watch-0.3.4.tgz"
}
