{
  "name": "gulp-sass",
  "version": "0.7.2",
  "description": "Gulp plugin for sass",
  "main": "index.js",
  "scripts": {
    "test": "node test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dlmanning/gulp-sass"
  },
  "keywords": [
    "gulpplugin",
    "sass",
    "gulp"
  ],
  "author": {
    "name": "David Manning"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/dlmanning/gulp-sass/issues"
  },
  "dependencies": {
    "node-sass": "^0.9",
    "gulp-util": "~2.2",
    "map-stream": "~0.1"
  },
  "devDependencies": {
    "tape": "~2.3",
    "concat-stream": "~1.4"
  },
  "jshintConfig": {
    "laxcomma": true
  },
  "readme": "[![Build Status](https://travis-ci.org/dlmanning/gulp-sass.png?branch=master)](https://travis-ci.org/dlmanning/gulp-sass)\n\ngulp-sass\n=========\n\nSASS plugin for [gulp](https://github.com/wearefractal/gulp).\n\n#Install\n\n```\nnpm install gulp-sass\n```\n\n#Basic Usage\n\nSomething like this:\n\n```javascript\nvar gulp = require('gulp');\nvar sass = require('gulp-sass')\n\ngulp.task('sass', function () {\n\tgulp.src('./scss/*.scss')\n\t\t.pipe(sass())\n\t\t.pipe(gulp.dest('./css'));\n});\n```\n\nOptions passed as a hash into `sass()` will be passed along to [`node-sass`](https://github.com/andrew/node-sass)\n\n## gulp-sass specific options\n\n#### `errLogToConsole: true`\n\nIf you pass `errLogToConsole: true` into the options hash, sass errors will be logged to the console instead of generating a `gutil.PluginError` object. Use this option with `gulp.watch` to keep gulp from stopping every time you mess up your sass.\n\n#### `onSuccess: callback`\n\nPass in your own callback to be called upon successful compilaton by node-sass. The callback has the form `callback(css)`, and is passed the compiled css as a string. Note: This *does not* prevent gulp-sass's default behavior of writing the output css file.\n\n#### `onError: callback`\n\nPass in your own callback to be called upon a sass error from node-sass. The callback has the form `callback(err)`, where err is the error string generated by libsass. Note: this *does* prevent an actual `gulpPluginError` object from being created.\n\n## Source Maps\n\ngulp-sass now generates *inline* source maps if you pass `sourceComments: 'map'` as an option. Note that gulp-sass won't actually do anything when passing `sourceMap: filepath`. Enjoy your source maps!\n\nNB: For those wondering, inline source maps are stuck onto the end of the css file instead of being in a separate map file. In this case, the original source contents are included as well, so you don't have to make sure your scss files are servable.\n\n#Imports and Partials\n\ngulp-sass now automatically passes along the directory of every scss file it parses as an include path for node-sass. This means that as long as you specify your includes relative to path of your scss file, everything will just work.\n\nscss/includes/_settings.scss:\n\n```scss\n$blue: #3bbfce;\n$margin: 16px;\n```\n\nscss/style.scss:\n\n```scss\n@import \"includes/settings\";\n\n.content-navigation {\n  border-color: $blue;\n  color:\n    darken($blue, 9%);\n}\n\n.border {\n  padding: $margin / 2;\n  margin: $margin / 2;\n  border-color: $blue;\n}\n```\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/dlmanning/gulp-sass",
  "_id": "gulp-sass@0.7.2",
  "_shasum": "c3345e6d5ab08fa3781d533c49787943ad7f28fb",
  "_from": "gulp-sass@^0.7.1",
  "_resolved": "https://registry.npmjs.org/gulp-sass/-/gulp-sass-0.7.2.tgz"
}
